{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport NFTMarketplace from \"../abis/NFTMarketplace.json\";\nvar selectedAccount;\nvar erc721token;\nvar isInitialized = false;\nvar web3;\nvar price = 2;\nexport var init =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var provider, address;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            provider = window.ethereum;\n\n            if (typeof provider !== 'undefined') {\n              provider.request({\n                method: 'eth_requestAccounts'\n              }).then(function (accounts) {\n                selectedAccount = accounts[0];\n                console.log(\"Selected account is \".concat(selectedAccount));\n              }).catch(function (err) {\n                console.log(err);\n                return;\n              });\n              window.ethereum.on('accountsChanged', function (accounts) {\n                selectedAccount = accounts[0];\n                console.log(\"Selected account changed to \".concat(selectedAccount));\n              });\n            }\n\n            web3 = new Web3(provider);\n            address = NFTMarketplace.networks['5777'].address;\n            erc721token = new web3.eth.Contract(NFTMarketplace.abi, address);\n            isInitialized = true;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function init() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var mintToken =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(data) {\n    var tx_hash, token_id, receipt, topics, tokenIdHex;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (isInitialized) {\n              _context2.next = 3;\n              break;\n            }\n\n            _context2.next = 3;\n            return init();\n\n          case 3:\n            tx_hash = null;\n            token_id = 0;\n            _context2.prev = 5;\n            _context2.next = 8;\n            return erc721token.methods.mint(data).send({\n              from: selectedAccount,\n              gas: 1000000\n            }).then(function (result) {\n              console.log(result);\n              var tx = result.transactionHash;\n              return tx;\n            });\n\n          case 8:\n            tx_hash = _context2.sent;\n            console.log(\"Hash: \" + tx_hash);\n            _context2.next = 12;\n            return web3.eth.getTransactionReceipt(tx_hash).then(function (result) {\n              return result;\n            });\n\n          case 12:\n            receipt = _context2.sent;\n            topics = receipt['logs'][0]['topics'];\n            tokenIdHex = topics[3].toString(10);\n            token_id = parseInt(tokenIdHex, 16);\n            _context2.next = 21;\n            break;\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t0 = _context2[\"catch\"](5);\n            console.log(_context2.t0);\n\n          case 21:\n            return _context2.abrupt(\"return\", {\n              'Hash': tx_hash,\n              'TokenID': token_id\n            });\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[5, 18]]);\n  }));\n\n  return function mintToken(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getBalance =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (isInitialized) {\n              _context3.next = 3;\n              break;\n            }\n\n            _context3.next = 3;\n            return init();\n\n          case 3:\n            return _context3.abrupt(\"return\", erc721token.methods.balanceOf(selectedAccount).call());\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getBalance() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var totalSupply =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4() {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (isInitialized) {\n              _context4.next = 3;\n              break;\n            }\n\n            _context4.next = 3;\n            return init();\n\n          case 3:\n            return _context4.abrupt(\"return\", erc721token.methods.totalSupply().call());\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function totalSupply() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var ownerOf =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(id) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (isInitialized) {\n              _context5.next = 3;\n              break;\n            }\n\n            _context5.next = 3;\n            return init();\n\n          case 3:\n            return _context5.abrupt(\"return\", erc721token.methods.ownerOf(id).call());\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function ownerOf(_x2) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var payEther =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6(to) {\n    var unit, isTransaction, eth_wei, transactionParameters, txHash;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (isInitialized) {\n              _context6.next = 3;\n              break;\n            }\n\n            _context6.next = 3;\n            return init();\n\n          case 3:\n            unit = require('ethjs-unit');\n            isTransaction = false;\n            eth_wei = unit.toWei(price, 'ether');\n            transactionParameters = {\n              nonce: '0x00',\n              gasPrice: '0x09184e72a000',\n              gas: '0x22710',\n              to: to,\n              from: selectedAccount,\n              value: eth_wei.toString(16),\n              chainId: '0x3'\n            };\n\n            if (!(selectedAccount != null)) {\n              _context6.next = 23;\n              break;\n            }\n\n            txHash = null;\n            _context6.prev = 9;\n            _context6.next = 12;\n            return window.ethereum.request({\n              method: 'eth_sendTransaction',\n              params: [transactionParameters]\n            });\n\n          case 12:\n            txHash = _context6.sent;\n            console.log(txHash);\n            _context6.next = 20;\n            break;\n\n          case 16:\n            _context6.prev = 16;\n            _context6.t0 = _context6[\"catch\"](9);\n            console.log(_context6.t0.code);\n            console.log(_context6.t0);\n\n          case 20:\n            if (!(txHash != null)) {\n              _context6.next = 23;\n              break;\n            }\n\n            erc721token.methods.transferFrom(to, selectedAccount, 1).then(function (result) {\n              console.log(result.transactionHash);\n              isTransaction = true;\n            });\n            return _context6.abrupt(\"return\", isTransaction);\n\n          case 23:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[9, 16]]);\n  }));\n\n  return function payEther(_x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\Users\\root\\Desktop\\marketplace(demo)\\src\\components\\web3.js"],"names":["Web3","NFTMarketplace","selectedAccount","erc721token","isInitialized","web3","price","init","provider","window","ethereum","request","method","then","accounts","console","log","catch","err","on","address","networks","eth","Contract","abi","mintToken","data","tx_hash","token_id","methods","mint","send","from","gas","result","tx","transactionHash","getTransactionReceipt","receipt","topics","tokenIdHex","toString","parseInt","getBalance","balanceOf","call","totalSupply","ownerOf","id","payEther","to","unit","require","isTransaction","eth_wei","toWei","transactionParameters","nonce","gasPrice","value","chainId","txHash","params","code","transferFrom"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\r\nimport NFTMarketplace from \"../abis/NFTMarketplace.json\";\r\n\r\nlet selectedAccount;\r\nlet erc721token;\r\nlet isInitialized = false;\r\nlet web3;\r\nlet price = 2;\r\n\r\nexport const init = async () => {\r\n    let provider = window.ethereum;    \r\n\r\n\tif (typeof provider !== 'undefined') {\r\n\t\tprovider\r\n\t\t\t.request({ method: 'eth_requestAccounts' })\r\n\t\t\t.then((accounts) => {\r\n\t\t\t\tselectedAccount = accounts[0];\r\n\t\t\t\tconsole.log(`Selected account is ${selectedAccount}`);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\treturn;\r\n\t\t\t});\r\n\r\n\t\twindow.ethereum.on('accountsChanged', function (accounts) {\r\n\t\t\tselectedAccount = accounts[0];\r\n\t\t\tconsole.log(`Selected account changed to ${selectedAccount}`);\r\n\t\t});\r\n\t}\r\n        web3 = new Web3(provider);\r\n        const address = NFTMarketplace.networks['5777'].address;\r\n        erc721token = new web3.eth.Contract(NFTMarketplace.abi, address)\r\n       \r\n        isInitialized = true;\r\n};\r\n\r\n\r\nexport const mintToken = async (data) =>{\r\n    if(!isInitialized){\r\n        await init()\r\n    }\r\n    let tx_hash = null;\r\n    let token_id = 0;\r\n    try{\r\n        tx_hash = await erc721token.methods.mint(data).send({from: selectedAccount, gas: 1000000}).then(function (result) {\r\n        console.log(result);\r\n        let tx = result.transactionHash;\r\n        return tx\r\n        });\r\n        console.log(\"Hash: \" + tx_hash);\r\n        let receipt = await web3.eth.getTransactionReceipt(tx_hash)\r\n        .then(function (result) {\r\n            return result\r\n        });\r\n        let topics = receipt['logs'][0]['topics'];\r\n        let tokenIdHex = topics[3].toString(10);\r\n        token_id = parseInt(tokenIdHex, 16)\r\n\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n    return {'Hash': tx_hash, 'TokenID': token_id};\r\n        //return erc721token.methods.mint(data).send({ from: selectedAccount });\r\n};\r\n\r\nexport const getBalance = async () =>{\r\n    if(!isInitialized){\r\n        await init()\r\n    }\r\n    return erc721token.methods.balanceOf(selectedAccount).call();\r\n}\r\n\r\nexport const totalSupply = async () =>{\r\n    if(!isInitialized){\r\n        await init()\r\n    }\r\n    return erc721token.methods.totalSupply().call();\r\n}\r\n\r\nexport const ownerOf = async (id) =>{\r\n    if(!isInitialized){\r\n        await init()\r\n    }\r\n    return erc721token.methods.ownerOf(id).call();\r\n}\r\n\r\nexport const payEther = async (to) =>{\r\n    if(!isInitialized){\r\n        await init()\r\n    }\r\n    const unit = require('ethjs-unit');\r\n    let isTransaction = false;\r\n    let eth_wei = unit.toWei(price, 'ether');\r\n    const transactionParameters = {\r\n        nonce: '0x00', \r\n        gasPrice: '0x09184e72a000', \r\n        gas: '0x22710', \r\n        to: to, \r\n        from: selectedAccount, \r\n        value: eth_wei.toString(16),\r\n        chainId: '0x3', \r\n    };\r\n\r\n    if (selectedAccount != null) {\r\n        let txHash = null;\r\n        try {\r\n            txHash = await window.ethereum.request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n            console.log(txHash)\r\n        } catch (error) {\r\n            console.log(error.code)\r\n            console.log(error)\r\n        }\r\n        if (txHash != null) {\r\n            erc721token.methods.transferFrom(to, selectedAccount, 1).then(function(result){\r\n            console.log(result.transactionHash);\r\n            isTransaction = true;\r\n            });\r\n            return isTransaction;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}