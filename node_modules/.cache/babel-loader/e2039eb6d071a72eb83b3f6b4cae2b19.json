{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport Eth from 'web3-eth';\nimport NFTMarketplace from \"../abis/NFTMarketplace.json\";\nvar selectedAccount;\nvar erc721token;\nvar isInitialized = false;\nvar web3;\nvar price = '0.5';\nvar address;\nexport var init =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var provider;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            provider = window.ethereum;\n\n            if (typeof provider !== 'undefined') {\n              provider.request({\n                method: 'eth_requestAccounts'\n              }).then(function (accounts) {\n                selectedAccount = accounts[0];\n                console.log(\"Selected account is \".concat(selectedAccount));\n              }).catch(function (err) {\n                console.log(err);\n                window.alert(\"Please connect to MetaMask!\");\n                return;\n              });\n              window.ethereum.on('accountsChanged', function (accounts) {\n                selectedAccount = accounts[0];\n                console.log(\"Selected account changed to \".concat(selectedAccount));\n              });\n            }\n\n            web3 = new Web3(provider);\n            address = NFTMarketplace.networks['5777'].address;\n            erc721token = new web3.eth.Contract(NFTMarketplace.abi, address);\n            isInitialized = true;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function init() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var mintToken =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(data) {\n    var tx_hash, token_id, receipt, topics, tokenIdHex;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (isInitialized) {\n              _context2.next = 3;\n              break;\n            }\n\n            _context2.next = 3;\n            return init();\n\n          case 3:\n            tx_hash = null;\n            token_id = 0;\n            _context2.prev = 5;\n            _context2.next = 8;\n            return erc721token.methods.mint(data).send({\n              from: selectedAccount,\n              gas: 1000000\n            }).then(function (result) {\n              console.log(result);\n              var tx = result.transactionHash;\n              return tx;\n            });\n\n          case 8:\n            tx_hash = _context2.sent;\n            console.log(\"Hash: \" + tx_hash);\n            _context2.next = 12;\n            return web3.eth.getTransactionReceipt(tx_hash).then(function (result) {\n              return result;\n            });\n\n          case 12:\n            receipt = _context2.sent;\n            topics = receipt['logs'][0]['topics'];\n            tokenIdHex = topics[3].toString(10);\n            token_id = parseInt(tokenIdHex, 16);\n            _context2.next = 21;\n            break;\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t0 = _context2[\"catch\"](5);\n            console.log(_context2.t0);\n\n          case 21:\n            return _context2.abrupt(\"return\", {\n              'Hash': tx_hash,\n              'TokenID': token_id\n            });\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[5, 18]]);\n  }));\n\n  return function mintToken(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getBalance =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (isInitialized) {\n              _context3.next = 3;\n              break;\n            }\n\n            _context3.next = 3;\n            return init();\n\n          case 3:\n            return _context3.abrupt(\"return\", erc721token.methods.balanceOf(selectedAccount).call());\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getBalance() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var totalSupply =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4() {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (isInitialized) {\n              _context4.next = 3;\n              break;\n            }\n\n            _context4.next = 3;\n            return init();\n\n          case 3:\n            return _context4.abrupt(\"return\", erc721token.methods.totalSupply().call());\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function totalSupply() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var ownerOf =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(id) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (isInitialized) {\n              _context5.next = 3;\n              break;\n            }\n\n            _context5.next = 3;\n            return init();\n\n          case 3:\n            return _context5.abrupt(\"return\", erc721token.methods.ownerOf(id).call());\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function ownerOf(_x2) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var payEther =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6(_id) {\n    var unit, isTransaction, invoice_id_hex, eth_wei, transactionParameters, txHash;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (isInitialized) {\n              _context6.next = 3;\n              break;\n            }\n\n            _context6.next = 3;\n            return init();\n\n          case 3:\n            unit = require('ethjs-unit');\n            isTransaction = false;\n            invoice_id_hex = '494e562d3030';\n            eth_wei = unit.toWei(price, 'ether');\n            _context6.t0 = address;\n            _context6.t1 = selectedAccount;\n            _context6.t2 = eth_wei.toString(16);\n            _context6.next = 12;\n            return erc721token.methods.buy(_id).encodeABI();\n\n          case 12:\n            _context6.t3 = _context6.sent;\n            transactionParameters = {\n              gasPrice: '0x09184e72a000',\n              gas: '0x22710',\n              to: _context6.t0,\n              from: _context6.t1,\n              value: _context6.t2,\n              data: _context6.t3\n            };\n\n            if (!(selectedAccount != null)) {\n              _context6.next = 28;\n              break;\n            }\n\n            txHash = null;\n            _context6.prev = 16;\n            _context6.next = 19;\n            return window.ethereum.request({\n              method: 'eth_sendTransaction',\n              params: [transactionParameters]\n            });\n\n          case 19:\n            txHash = _context6.sent;\n            console.log(txHash);\n            _context6.next = 27;\n            break;\n\n          case 23:\n            _context6.prev = 23;\n            _context6.t4 = _context6[\"catch\"](16);\n            console.log(_context6.t4.code);\n            console.log(_context6.t4);\n\n          case 27:\n            isTransaction = true;\n\n          case 28:\n            return _context6.abrupt(\"return\", isTransaction);\n\n          case 29:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[16, 23]]);\n  }));\n\n  return function payEther(_x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\Users\\root\\Desktop\\marketplace(demo)\\src\\components\\web3.js"],"names":["Web3","Eth","NFTMarketplace","selectedAccount","erc721token","isInitialized","web3","price","address","init","provider","window","ethereum","request","method","then","accounts","console","log","catch","err","alert","on","networks","eth","Contract","abi","mintToken","data","tx_hash","token_id","methods","mint","send","from","gas","result","tx","transactionHash","getTransactionReceipt","receipt","topics","tokenIdHex","toString","parseInt","getBalance","balanceOf","call","totalSupply","ownerOf","id","payEther","_id","unit","require","isTransaction","invoice_id_hex","eth_wei","toWei","buy","encodeABI","transactionParameters","gasPrice","to","value","txHash","params","code"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\r\nimport Eth from 'web3-eth'\r\nimport NFTMarketplace from \"../abis/NFTMarketplace.json\";\r\n\r\nlet selectedAccount;\r\nlet erc721token;\r\nlet isInitialized = false;\r\nlet web3;\r\nlet price = '0.5';\r\nlet address;\r\n\r\nexport const init = async () => {\r\n    let provider = window.ethereum;    \r\n\r\n\tif (typeof provider !== 'undefined') {\r\n\t\tprovider\r\n\t\t\t.request({ method: 'eth_requestAccounts' })\r\n\t\t\t.then((accounts) => {\r\n\t\t\t\tselectedAccount = accounts[0];\r\n\t\t\t\tconsole.log(`Selected account is ${selectedAccount}`);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n                window.alert(\"Please connect to MetaMask!\");\r\n\t\t\t\treturn;\r\n\t\t\t});\r\n\r\n\t\twindow.ethereum.on('accountsChanged', function (accounts) {\r\n\t\t\tselectedAccount = accounts[0];\r\n\t\t\tconsole.log(`Selected account changed to ${selectedAccount}`);\r\n\t\t});\r\n\t}\r\n        web3 = new Web3(provider);\r\n        address = NFTMarketplace.networks['5777'].address;\r\n        erc721token = new web3.eth.Contract(NFTMarketplace.abi, address)\r\n        isInitialized = true;\r\n};\r\n\r\n\r\nexport const mintToken = async (data) =>{\r\n    if(!isInitialized){\r\n        await init()\r\n    }\r\n    let tx_hash = null;\r\n    let token_id = 0;\r\n    try{\r\n        tx_hash = await erc721token.methods.mint(data).send({from: selectedAccount, gas: 1000000}).then(function (result) {\r\n        console.log(result);\r\n        let tx = result.transactionHash;\r\n        return tx\r\n        });\r\n        console.log(\"Hash: \" + tx_hash);\r\n        let receipt = await web3.eth.getTransactionReceipt(tx_hash)\r\n        .then(function (result) {\r\n            return result\r\n        });\r\n        let topics = receipt['logs'][0]['topics'];\r\n        let tokenIdHex = topics[3].toString(10);\r\n        token_id = parseInt(tokenIdHex, 16)\r\n\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n    return {'Hash': tx_hash, 'TokenID': token_id};\r\n};\r\n\r\nexport const getBalance = async () =>{\r\n    if(!isInitialized){\r\n        await init()\r\n    }\r\n    return erc721token.methods.balanceOf(selectedAccount).call();\r\n}\r\n\r\nexport const totalSupply = async () =>{\r\n    if(!isInitialized){\r\n        await init()\r\n    }\r\n    return erc721token.methods.totalSupply().call();\r\n}\r\n\r\nexport const ownerOf = async (id) =>{\r\n    if(!isInitialized){\r\n        await init()\r\n    }\r\n    return erc721token.methods.ownerOf(id).call();\r\n}\r\n\r\nexport const payEther = async (_id) =>{\r\n    if(!isInitialized){\r\n        await init()\r\n    }\r\n    const unit = require('ethjs-unit');\r\n\r\n    let isTransaction = false;\r\n    let invoice_id_hex = '494e562d3030';\r\n    let eth_wei = unit.toWei(price, 'ether');\r\n\r\n    const transactionParameters = {\r\n        gasPrice: '0x09184e72a000', // customizable by user during MetaMask confirmation.\r\n        gas: '0x22710', // customizable by user during MetaMask confirmation.\r\n        to: address, // Required except during contract publications.\r\n        from: selectedAccount, // must match user's active address.\r\n        value: eth_wei.toString(16),\r\n        data: await erc721token.methods.buy(_id).encodeABI(), // You must use a random Invoice ID. it is for Demo Purpose Only\r\n    };\r\n\r\n    if (selectedAccount != null) {\r\n        let txHash = null;\r\n        try {\r\n            txHash = await window.ethereum.request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n            console.log(txHash) \r\n        } catch (error) {\r\n            console.log(error.code)\r\n            console.log(error)\r\n        }\r\n        isTransaction = true;\r\n    }\r\n    return isTransaction;\r\n}"]},"metadata":{},"sourceType":"module"}