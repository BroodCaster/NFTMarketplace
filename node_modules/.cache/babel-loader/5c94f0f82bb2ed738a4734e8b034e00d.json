{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport NFTMarketplace from \"../abis/NFTMarketplace.json\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var button, clicked;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                button = document.getElementById('enableEthereumButton');\n                clicked = false;\n                button.addEventListener(\"click\",\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          clicked = true;\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })));\n\n                if (!clicked) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                _context2.next = 6;\n                return this.loadWeb3();\n\n              case 6:\n                _context2.next = 8;\n                return this.loadBlockchainData();\n\n              case 8:\n                _context2.next = 10;\n                break;\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"NON-Ethereum browser detected\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var web3, accounts;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                web3 = window.web3;\n                _context4.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context4.sent;\n                this.setState({\n                  account: accounts\n                });\n                /*const networkId = await web3.eth.net.getId()\r\n                const networkData = NFTMarketplace.networks[networkId]\r\n                if(networkData){\r\n                      const abi = NFTMarketplace.abi;\r\n                    const address = networkData.address;\r\n                    const contract = new web3.eth.Contract(abi, address);\r\n                    console.log(contract)\r\n                }\r\n                else{\r\n                    console.log(\"Network didn't find\")\r\n                }*/\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"NFT Marketplace\"), React.createElement(\"button\", {\n        class: \"enableEthereumButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Enable Ethereum\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Account: \", React.createElement(\"span\", {\n        class: \"showAccount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\root\\Desktop\\marketplace(demo)\\src\\components\\App.js"],"names":["React","Component","Web3","detectEthereumProvider","NFTMarketplace","App","button","document","getElementById","clicked","addEventListener","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,cAAP,MAA2B,6BAA3B;;IAEMC,G;;;;;;;;;;;;;;;;;;;;;;AAGQC,gBAAAA,M,GAASC,QAAQ,CAACC,cAAT,CAAwB,sBAAxB,C;AACXC,gBAAAA,O,GAAU,K;AACdH,gBAAAA,MAAM,CAACI,gBAAP,CAAwB,OAAxB;AAAA;AAAA;AAAA;AAAA,yCAAiC;AAAA;AAAA;AAAA;AAAA;AAC9BD,0BAAAA,OAAO,GAAG,IAAV;;AAD8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAjC;;qBAIGA,O;;;;;;uBACO,KAAKE,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qBAQPC,MAAM,CAACC,Q;;;;;AACND,gBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIb,IAAJ,CAASW,MAAM,CAACC,QAAhB,CAAd;;uBACMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,E;;;;;;;AAEL,oBAAGH,MAAM,CAACE,IAAV,EAAe;AAChBF,kBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIb,IAAJ,CAASW,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AACH,iBAFI,MAGD;AACAJ,kBAAAA,MAAM,CAACK,KAAP,CAAa,+BAAb;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIKH,gBAAAA,I,GAAOF,MAAM,CAACE,I;;uBACGA,IAAI,CAACI,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;AACN,qBAAKC,QAAL,CAAc;AAACC,kBAAAA,OAAO,EAACF;AAAT,iBAAd;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAmBI;AACJ,aACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,EAEI;AAAQ,QAAA,KAAK,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAa;AAAM,QAAA,KAAK,EAAC,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAb,CAHJ,CADA;AAOH;;;;EA/DapB,S;;AAkElB,eAAeI,GAAf","sourcesContent":["import React, {Component} from \"react\";\r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport NFTMarketplace from \"../abis/NFTMarketplace.json\"\r\n\r\nclass App extends Component{\r\n\r\n    async componentWillMount(){\r\n        const button = document.getElementById('enableEthereumButton')\r\n        let clicked = false \r\n        button.addEventListener(\"click\", async () => {\r\n           clicked = true\r\n        })\r\n\r\n        if(clicked){\r\n            await this.loadWeb3();\r\n            await this.loadBlockchainData();\r\n        }\r\n        else{}\r\n\r\n\r\n    }\r\n\r\n   async loadWeb3(){\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        }\r\n        else if(window.web3){\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n        else{\r\n            window.alert(\"NON-Ethereum browser detected\")\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData(){\r\n        const web3 = window.web3;\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account:accounts})\r\n\r\n        /*const networkId = await web3.eth.net.getId()\r\n        const networkData = NFTMarketplace.networks[networkId]\r\n        if(networkData){\r\n\r\n            const abi = NFTMarketplace.abi;\r\n            const address = networkData.address;\r\n            const contract = new web3.eth.Contract(abi, address);\r\n            console.log(contract)\r\n        }\r\n        else{\r\n            console.log(\"Network didn't find\")\r\n        }*/\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n    render(){\r\n        return(\r\n        <div>\r\n            <h1>NFT Marketplace</h1>\r\n            <button class=\"enableEthereumButton\">Enable Ethereum</button>\r\n            <h2>Account: <span class=\"showAccount\"></span></h2>\r\n        </div>       \r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}