{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"node_modules/web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport NFTMarketplace from \"../abis/NFTMarketplace.json\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var metamaskInstalled;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                metamaskInstalled = typeof window.web3 !== 'undefined';\n\n                if (!metamaskInstalled) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.loadWeb3();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"NON-Ethereum browser detected\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var networkId, networkData, abi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return web3.eth.net.getId();\n\n              case 2:\n                networkId = _context3.sent;\n                networkData = NFTMarketplace.networks[networkId];\n\n                if (networkData) {\n                  abi = NFTMarketplace.abi;\n                  address = networkData.address;\n                  contract = new web3.eth.contract(abi, address);\n                  console.log(contract);\n                }\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"NFT Marketplace\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\root\\Desktop\\marketplace(demo)\\src\\components\\App.js"],"names":["React","Component","Web3","detectEthereumProvider","NFTMarketplace","App","metamaskInstalled","window","web3","loadWeb3","ethereum","enable","currentProvider","alert","eth","net","getId","networkId","networkData","networks","abi","address","contract","console","log"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,cAAP,MAA2B,6BAA3B;;IAEMC,G;;;;;;;;;;;;;;;;;;;;;;AAGQC,gBAAAA,iB,GAAoB,OAAOC,MAAM,CAACC,IAAd,KAAuB,W;;qBAC9CF,iB;;;;;;uBACO,KAAKG,QAAL,E;;;;;;;;;;;;;;;;;;;;;;;;;;qBAKPF,MAAM,CAACG,Q;;;;;AACNH,gBAAAA,MAAM,CAACC,IAAP,GAAc,IAAIN,IAAJ,CAASK,MAAM,CAACG,QAAhB,CAAd;;uBACMH,MAAM,CAACG,QAAP,CAAgBC,MAAhB,E;;;;;;;AAEL,oBAAGJ,MAAM,CAACC,IAAV,EAAe;AAChBD,kBAAAA,MAAM,CAACC,IAAP,GAAc,IAAIN,IAAJ,CAASK,MAAM,CAACC,IAAP,CAAYI,eAArB,CAAd;AACH,iBAFI,MAGD;AACAL,kBAAAA,MAAM,CAACM,KAAP,CAAa,+BAAb;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAIuBL,IAAI,CAACM,GAAL,CAASC,GAAT,CAAaC,KAAb,E;;;AAAlBC,gBAAAA,S;AACAC,gBAAAA,W,GAAcd,cAAc,CAACe,QAAf,CAAwBF,SAAxB,C;;AACpB,oBAAGC,WAAH,EAAe;AACLE,kBAAAA,GADK,GACChB,cAAc,CAACgB,GADhB;AAELC,kBAAAA,OAFK,GAEKH,WAAW,CAACG,OAFjB;AAGLC,kBAAAA,QAHK,GAGM,IAAId,IAAI,CAACM,GAAL,CAASQ,QAAb,CAAsBF,GAAtB,EAA2BC,OAA3B,CAHN;AAIXE,kBAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACH;;;;;;;;;;;;;;;;;;6BAIG;AACJ,aACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,CADA;AAKH;;;;EAxCarB,S;;AA2ClB,eAAeI,GAAf","sourcesContent":["import React, {Component} from \"react\";\r\nimport Web3 from \"node_modules/web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport NFTMarketplace from \"../abis/NFTMarketplace.json\"\r\n\r\nclass App extends Component{\r\n\r\n    async componentWillMount(){      \r\n        const metamaskInstalled = typeof window.web3 !== 'undefined'\r\n        if(metamaskInstalled) {\r\n            await this.loadWeb3();\r\n        }\r\n    }\r\n\r\n   async loadWeb3(){\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        }\r\n        else if(window.web3){\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n        else{\r\n            window.alert(\"NON-Ethereum browser detected\")\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData(){\r\n        const networkId = await web3.eth.net.getId();\r\n        const networkData = NFTMarketplace.networks[networkId]\r\n        if(networkData){\r\n            const abi = NFTMarketplace.abi;\r\n            const address = networkData.address;\r\n            const contract = new web3.eth.contract(abi, address);\r\n            console.log(contract);\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n        <div>\r\n            <h1>NFT Marketplace</h1>\r\n        </div>       \r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}