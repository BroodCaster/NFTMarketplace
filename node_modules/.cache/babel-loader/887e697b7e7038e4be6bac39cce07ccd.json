{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport NFTMarketplace from \"../abis/NFTMarketplace.json\";\nvar selectedAccount;\nvar erc721token;\nvar isInitialized = false;\nexport var init =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var provider, web3, address;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            provider = window.ethereum;\n\n            if (typeof provider !== 'undefined') {\n              provider.request({\n                method: 'eth_requestAccounts'\n              }).then(function (accounts) {\n                selectedAccount = accounts[0];\n                console.log(\"Selected account is \".concat(selectedAccount));\n              }).catch(function (err) {\n                console.log(err);\n                return;\n              });\n              window.ethereum.on('accountsChanged', function (accounts) {\n                selectedAccount = accounts[0];\n                console.log(\"Selected account changed to \".concat(selectedAccount));\n              });\n            }\n\n            web3 = new Web3(provider);\n            address = NFTMarketplace.networks['5777'].address;\n            erc721token = new web3.eth.Contract(NFTMarketplace.abi, address);\n            isInitialized = true;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function init() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var mintToken =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(data) {\n    var tx_hash, token_id;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (isInitialized) {\n              _context2.next = 3;\n              break;\n            }\n\n            _context2.next = 3;\n            return init();\n\n          case 3:\n            tx_hash = null;\n            token_id = 0;\n\n            try {} catch (error) {} //return erc721token.methods.mint(data).send({ from: selectedAccount });\n\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function mintToken(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getBalance =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (isInitialized) {\n              _context3.next = 3;\n              break;\n            }\n\n            _context3.next = 3;\n            return init();\n\n          case 3:\n            return _context3.abrupt(\"return\", erc721token.methods.balanceOf(selectedAccount).call());\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getBalance() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var totalSupply =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4() {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (isInitialized) {\n              _context4.next = 3;\n              break;\n            }\n\n            _context4.next = 3;\n            return init();\n\n          case 3:\n            return _context4.abrupt(\"return\", erc721token.methods.totalSupply().call());\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function totalSupply() {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\Users\\root\\Desktop\\marketplace(demo)\\src\\components\\web3.js"],"names":["Web3","NFTMarketplace","selectedAccount","erc721token","isInitialized","init","provider","window","ethereum","request","method","then","accounts","console","log","catch","err","on","web3","address","networks","eth","Contract","abi","mintToken","data","tx_hash","token_id","error","getBalance","methods","balanceOf","call","totalSupply"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\r\nimport NFTMarketplace from \"../abis/NFTMarketplace.json\";\r\n\r\nlet selectedAccount;\r\nlet erc721token;\r\nlet isInitialized = false;\r\n\r\nexport const init = async () => {\r\n    let provider = window.ethereum;    \r\n\r\n\tif (typeof provider !== 'undefined') {\r\n\t\tprovider\r\n\t\t\t.request({ method: 'eth_requestAccounts' })\r\n\t\t\t.then((accounts) => {\r\n\t\t\t\tselectedAccount = accounts[0];\r\n\t\t\t\tconsole.log(`Selected account is ${selectedAccount}`);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\treturn;\r\n\t\t\t});\r\n\r\n\t\twindow.ethereum.on('accountsChanged', function (accounts) {\r\n\t\t\tselectedAccount = accounts[0];\r\n\t\t\tconsole.log(`Selected account changed to ${selectedAccount}`);\r\n\t\t});\r\n\t}\r\n        const web3 = new Web3(provider);\r\n        const address = NFTMarketplace.networks['5777'].address;\r\n        erc721token = new web3.eth.Contract(NFTMarketplace.abi, address)\r\n       \r\n        isInitialized = true;\r\n};\r\n\r\n\r\nexport const mintToken = async (data) =>{\r\n    if(!isInitialized){\r\n        await init()\r\n    }\r\n    let tx_hash = null;\r\n    let token_id = 0;\r\n    try{\r\n        \r\n\r\n    }catch(error){\r\n\r\n    }\r\n        //return erc721token.methods.mint(data).send({ from: selectedAccount });\r\n};\r\n\r\nexport const getBalance = async () =>{\r\n    if(!isInitialized){\r\n        await init()\r\n    }\r\n    return erc721token.methods.balanceOf(selectedAccount).call();\r\n}\r\n\r\nexport const totalSupply = async () =>{\r\n    if(!isInitialized){\r\n        await init()\r\n    }\r\n    return erc721token.methods.totalSupply().call();\r\n}"]},"metadata":{},"sourceType":"module"}