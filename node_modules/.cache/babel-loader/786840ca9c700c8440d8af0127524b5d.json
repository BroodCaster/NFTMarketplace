{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n * First we will load all of this project's JavaScript dependencies which\r\n * includes Vue and other libraries. It is a great starting point when\r\n * building robust, powerful web applications using Vue and Laravel.\r\n */\n//require('./bootstrap');\nvar currentAccount = null;\nvar abi;\nvar contactAddress = '0x47Cf242162484B791f2bb91457e9b72A53cE9B81'; // dCars deployed NFT address\n\nfunction addTransaction(tx_hash, data) {\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n  $.post('http://localhost:8000/transaction/add', {\n    tx_hash: tx_hash,\n    data: JSON.stringify(data)\n  }, function (result) {\n    console.log(result);\n  });\n}\n/*async function payEther(car_price) {\r\n    let isTransaction = false;\r\n    let MERCHANT_ACCOUNT = '0x3595B4054E1A86Ef5D86fc4A03A58fc998a26d5a'\r\n    let eth_wei = ethUnit.toWei(car_price, 'ether');\r\n    // console.log('ETH AMOUNT ='+eth_wei)\r\n    // console.log('ETH IN HEX ='+eth_wei.toString(16))\r\n    let invoice_id_hex = '494e562d3030';\r\n\r\n    const transactionParameters = {\r\n        nonce: '0x00', // ignored by MetaMask\r\n        gasPrice: '0x09184e72a000', // customizable by user during MetaMask confirmation.\r\n        gas: '0x22710', // customizable by user during MetaMask confirmation.\r\n        to: MERCHANT_ACCOUNT, // Required except during contract publications.\r\n        from: currentAccount, // must match user's active address.\r\n        value: eth_wei.toString(16),\r\n        data: invoice_id_hex, // You must use a random Invoice ID. it is for Demo Purpose Only\r\n        chainId: '0x3', // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\r\n    };\r\n    // console.log(transactionParameters)\r\n\r\n    if (currentAccount != null) {\r\n        let txHash = null;\r\n        try {\r\n            txHash = await ethereum.request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n            console.log(txHash)\r\n        } catch (error) {\r\n            console.log(error.code)\r\n            console.log(error)\r\n        }\r\n        // console.log('Printing MetaMask Result')\r\n        // console.log(txHash)\r\n        if (txHash != null) {\r\n            addTransaction(txHash, {'invoice_id': invoice_id_hex})\r\n            isTransaction = true;\r\n        }\r\n    }\r\n\r\n    return isTransaction\r\n}*/\n\n\nfunction handleAccountsChanged(accounts) {\n  console.log('Calling HandleChanged');\n\n  if (accounts.length === 0) {\n    console.log('Please connect to MetaMask.');\n    $('#enableMetamask').html('Connect with Metamask');\n  } else if (accounts[0] !== currentAccount) {\n    currentAccount = accounts[0];\n    $('#enableMetamask').html(currentAccount);\n    $('#status').html('');\n\n    if (currentAccount != null) {\n      // Set the button label\n      $('#enableMetamask').html(currentAccount);\n    }\n  }\n\n  var url = 'http://localhost:8000/set_wallet/' + currentAccount;\n  $.getJSON(url, function (result) {\n    console.log(result);\n  });\n  console.log('WalletAddress in HandleAccountChanged =' + currentAccount); //Set AJAX request to insert value in DB\n}\n\nfunction connect() {\n  console.log('Calling connect()');\n  ethereum.request({\n    method: 'eth_requestAccounts'\n  }).then(handleAccountsChanged).catch(function (err) {\n    if (err.code === 4001) {\n      // EIP-1193 userRejectedRequest error\n      // If this happens, the user rejected the connection request.\n      console.log('Please connect to MetaMask.');\n      $('#status').html('You refused to connect Metamask');\n    } else {\n      console.error(err);\n    }\n  });\n}\n/**\r\n * This function will call contract's mintNFT function and return hashTX and Token URI\r\n */\n\n\nfunction createNFT(_x, _x2) {\n  return _createNFT.apply(this, arguments);\n}\n\nfunction _createNFT() {\n  _createNFT = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(uri, account) {\n    var web3, tx_hash, token_id, contract, receipt, topics, tokenIdHex;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tx_hash = null;\n            token_id = 0;\n            _context.prev = 2;\n            console.log('Inside createNFT'); // console.log(abi);\n\n            console.log(account);\n            web3 = new Web3(new Web3.providers.HttpProvider(\"HTTP://127.0.0.1:7545\"));\n            contract = new web3.eth.Contract(abi, contactAddress);\n            _context.next = 9;\n            return contract.methods.mint(uri).send({\n              from: account,\n              gas: 1000000\n            }).then(function (result) {\n              console.log(result);\n              var tx = result.transactionHash;\n              return tx;\n            });\n\n          case 9:\n            tx_hash = _context.sent;\n            console.log('Hash Outside:- ' + tx_hash);\n            _context.next = 13;\n            return web3.eth.getTransactionReceipt(tx_hash).then(function (result) {\n              return result;\n            });\n\n          case 13:\n            receipt = _context.sent;\n\n            /**\r\n             * In order to grab the returned TokenID we need to grab info from logs.\r\n             */\n            topics = receipt['logs'][0]['topics'];\n            tokenIdHex = topics[3].toString(10);\n            token_id = parseInt(tokenIdHex, 16);\n            _context.next = 23;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](2);\n            console.log('Exception in createNFT');\n            console.log(_context.t0);\n\n          case 23:\n            _context.prev = 23;\n            web3 = null;\n            return _context.finish(23);\n\n          case 26:\n            return _context.abrupt(\"return\", {\n              'tx_hash': tx_hash,\n              'token_id': token_id\n            });\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 19, 23, 26]]);\n  }));\n  return _createNFT.apply(this, arguments);\n}\n\nvar base_url = 'http://localhost:8000/';\n$.getJSON(base_url + \"dCars.json\", function (result) {\n  abi = result.abi;\n});\n$(document).ready(function () {\n  $('#enableMetamask').click(function () {\n    // alert('Hi Bay');\n    connect();\n  });\n  $('#btnReserved').click(function () {\n    var data_id = $(this).data('carid');\n    var url = \"http://localhost:8000/car/\".concat(data_id, \"/reserve/\");\n    $.getJSON(url, function (result) {\n      console.log(result.STATUS);\n    });\n  });\n  $('#btnBuy').click(function () {\n    var registered_wallet = $(this).data('wallet');\n    var car_price = $(this).data('price');\n    var car_id = $(this).data('carid');\n    var meta_url = \"http://localhost:8000/nft/meta/\".concat(car_id, \".json\");\n    var nftid = $(this).data('nftid');\n    console.log(registered_wallet);\n    console.log('Current Account = ' + currentAccount);\n    /*\r\n     Data Attribute of Buy button are set only if session var is set which\r\n     is only possible if you are logged in\r\n     */\n\n    if (registered_wallet == '') {\n      alert('You are not logged in');\n      return false;\n    }\n\n    if (registered_wallet.toLowerCase() != currentAccount.toLowerCase()) {\n      alert('You are using the wallet which is not registered with us. Your registered wallet address is:- ' + registered_wallet + ' while you are connected with the wallet address:-' + currentAccount);\n      return false;\n    }\n\n    $.ajaxSetup({\n      headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n      }\n    });\n    /**\r\n     * This function will deduct Ether price of the Car\r\n     */\n\n    payEther(car_price).then(function (result) {\n      console.log('PayEther Return Value');\n\n      if (result) {\n        console.log('Payment fetched, lets Mint NFT');\n        /**\r\n         * Add NFT Code Here\r\n         */\n\n        var output = createNFT(meta_url, currentAccount).then(function (result) {\n          console.clear();\n          var transaction_hash = result.tx_hash;\n          var token_id = result.token_id;\n          var mint_url = \"http://localhost:8000/nft/minted\";\n          console.log(nftid + '-' + transaction_hash + '-' + token_id + '-' + car_id, currentAccount, 'dCar');\n          console.log('Mint Transaction Hash:- ' + transaction_hash);\n          $.post(mint_url, {\n            nft_id: nftid,\n            event: \"mint\",\n            to: currentAccount,\n            from: 'dCars',\n            tx_hash: transaction_hash,\n            token_id: token_id,\n            car_id: car_id\n          }, function (data) {\n            console.log(data);\n          });\n        });\n        alert('You successfully bought this car. The car ownership transferred to you.');\n      } else {\n        console.log('User do not want NFT!!!');\n      }\n    });\n  });\n  connect();\n});","map":{"version":3,"sources":["C:\\Users\\root\\Desktop\\marketplace(demo)\\src\\components\\App.js"],"names":["currentAccount","abi","contactAddress","addTransaction","tx_hash","data","$","ajaxSetup","headers","attr","post","JSON","stringify","result","console","log","handleAccountsChanged","accounts","length","html","url","getJSON","connect","ethereum","request","method","then","catch","err","code","error","createNFT","uri","account","token_id","web3","Web3","providers","HttpProvider","contract","eth","Contract","methods","mint","send","from","gas","tx","transactionHash","getTransactionReceipt","receipt","topics","tokenIdHex","toString","parseInt","base_url","document","ready","click","data_id","STATUS","registered_wallet","car_price","car_id","meta_url","nftid","alert","toLowerCase","payEther","output","clear","transaction_hash","mint_url","nft_id","event","to"],"mappings":"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","sourcesContent":["/**\r\n * First we will load all of this project's JavaScript dependencies which\r\n * includes Vue and other libraries. It is a great starting point when\r\n * building robust, powerful web applications using Vue and Laravel.\r\n */\r\n\r\n//require('./bootstrap');\r\nlet currentAccount = null;\r\n\r\nlet abi;\r\n\r\nlet contactAddress = '0x47Cf242162484B791f2bb91457e9b72A53cE9B81'; // dCars deployed NFT address\r\n\r\nfunction addTransaction(tx_hash, data) {\r\n    $.ajaxSetup({\r\n        headers: {\r\n            'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\r\n        }\r\n    });\r\n\r\n    $.post('http://localhost:8000/transaction/add', {tx_hash: tx_hash, data: JSON.stringify(data)}, function (result) {\r\n        console.log(result);\r\n    });\r\n}\r\n\r\n/*async function payEther(car_price) {\r\n    let isTransaction = false;\r\n    let MERCHANT_ACCOUNT = '0x3595B4054E1A86Ef5D86fc4A03A58fc998a26d5a'\r\n    let eth_wei = ethUnit.toWei(car_price, 'ether');\r\n    // console.log('ETH AMOUNT ='+eth_wei)\r\n    // console.log('ETH IN HEX ='+eth_wei.toString(16))\r\n    let invoice_id_hex = '494e562d3030';\r\n\r\n    const transactionParameters = {\r\n        nonce: '0x00', // ignored by MetaMask\r\n        gasPrice: '0x09184e72a000', // customizable by user during MetaMask confirmation.\r\n        gas: '0x22710', // customizable by user during MetaMask confirmation.\r\n        to: MERCHANT_ACCOUNT, // Required except during contract publications.\r\n        from: currentAccount, // must match user's active address.\r\n        value: eth_wei.toString(16),\r\n        data: invoice_id_hex, // You must use a random Invoice ID. it is for Demo Purpose Only\r\n        chainId: '0x3', // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\r\n    };\r\n    // console.log(transactionParameters)\r\n\r\n    if (currentAccount != null) {\r\n        let txHash = null;\r\n        try {\r\n            txHash = await ethereum.request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n            console.log(txHash)\r\n        } catch (error) {\r\n            console.log(error.code)\r\n            console.log(error)\r\n        }\r\n        // console.log('Printing MetaMask Result')\r\n        // console.log(txHash)\r\n        if (txHash != null) {\r\n            addTransaction(txHash, {'invoice_id': invoice_id_hex})\r\n            isTransaction = true;\r\n        }\r\n    }\r\n\r\n    return isTransaction\r\n}*/\r\n\r\nfunction handleAccountsChanged(accounts) {\r\n    console.log('Calling HandleChanged')\r\n\r\n    if (accounts.length === 0) {\r\n        console.log('Please connect to MetaMask.');\r\n        $('#enableMetamask').html('Connect with Metamask')\r\n    } else if (accounts[0] !== currentAccount) {\r\n        currentAccount = accounts[0];\r\n        $('#enableMetamask').html(currentAccount)\r\n        $('#status').html('')\r\n\r\n        if (currentAccount != null) {\r\n            // Set the button label\r\n            $('#enableMetamask').html(currentAccount)\r\n        }\r\n    }\r\n\r\n    let url = 'http://localhost:8000/set_wallet/' + currentAccount;\r\n\r\n    $.getJSON(url, function (result) {\r\n        console.log(result)\r\n    });\r\n    console.log('WalletAddress in HandleAccountChanged =' + currentAccount)\r\n\r\n    //Set AJAX request to insert value in DB\r\n}\r\n\r\nfunction connect() {\r\n    console.log('Calling connect()')\r\n    ethereum\r\n        .request({method: 'eth_requestAccounts'})\r\n        .then(handleAccountsChanged)\r\n        .catch((err) => {\r\n            if (err.code === 4001) {\r\n                // EIP-1193 userRejectedRequest error\r\n                // If this happens, the user rejected the connection request.\r\n                console.log('Please connect to MetaMask.');\r\n                $('#status').html('You refused to connect Metamask')\r\n            } else {\r\n                console.error(err);\r\n            }\r\n        });\r\n}\r\n\r\n/**\r\n * This function will call contract's mintNFT function and return hashTX and Token URI\r\n */\r\nasync function createNFT(uri, account) {\r\n    let web3;\r\n    let tx_hash = null;\r\n    let token_id = 0;\r\n    try {\r\n        console.log('Inside createNFT');\r\n        // console.log(abi);\r\n        console.log(account);\r\n        web3 = new Web3(new Web3.providers.HttpProvider(\"HTTP://127.0.0.1:7545\"));\r\n        const contract = new web3.eth.Contract(abi, contactAddress);\r\n\r\n        tx_hash = await contract.methods.mint(uri).send({from: account, gas: 1000000}).then(function (result) {\r\n            console.log(result);\r\n            let tx = result.transactionHash;\r\n            return tx\r\n        });\r\n        console.log('Hash Outside:- ' + tx_hash)\r\n\r\n        let receipt = await web3.eth.getTransactionReceipt(tx_hash)\r\n            .then(function (result) {\r\n                return result\r\n            });\r\n\r\n        /**\r\n         * In order to grab the returned TokenID we need to grab info from logs.\r\n         */\r\n        let topics = receipt['logs'][0]['topics'];\r\n        let tokenIdHex = topics[3].toString(10);\r\n        token_id = parseInt(tokenIdHex, 16)\r\n\r\n    } catch (error) {\r\n        console.log('Exception in createNFT')\r\n        console.log(error)\r\n    }\r\n    finally {\r\n        web3 = null;\r\n    }\r\n    return {'tx_hash': tx_hash, 'token_id': token_id};\r\n}\r\n\r\nlet base_url = 'http://localhost:8000/';\r\n$.getJSON(base_url + \"dCars.json\", function (result) {\r\n    abi = result.abi;\r\n});\r\n\r\n$(document).ready(function () {\r\n\r\n    $('#enableMetamask').click(function () {\r\n        // alert('Hi Bay');\r\n        connect()\r\n    });\r\n\r\n    $('#btnReserved').click(function () {\r\n        let data_id = $(this).data('carid');\r\n        let url = `http://localhost:8000/car/${data_id}/reserve/`;\r\n\r\n        $.getJSON(url, function (result) {\r\n            console.log(result.STATUS)\r\n        });\r\n\r\n\r\n    });\r\n\r\n    $('#btnBuy').click(function () {\r\n        let registered_wallet = $(this).data('wallet');\r\n        let car_price = $(this).data('price');\r\n        let car_id = $(this).data('carid');\r\n        let meta_url = `http://localhost:8000/nft/meta/${car_id}.json`;\r\n        let nftid = $(this).data('nftid');\r\n\r\n        console.log(registered_wallet);\r\n        console.log('Current Account = ' + currentAccount)\r\n\r\n        /*\r\n         Data Attribute of Buy button are set only if session var is set which\r\n         is only possible if you are logged in\r\n         */\r\n        if (registered_wallet == '') {\r\n            alert('You are not logged in')\r\n            return false\r\n        }\r\n\r\n        if (registered_wallet.toLowerCase() != currentAccount.toLowerCase()) {\r\n            alert('You are using the wallet which is not registered with us. Your registered wallet address is:- ' + registered_wallet + ' while you are connected with the wallet address:-' + currentAccount)\r\n            return false\r\n        }\r\n\r\n        $.ajaxSetup({\r\n            headers: {\r\n                'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\r\n            }\r\n        });\r\n\r\n        /**\r\n         * This function will deduct Ether price of the Car\r\n         */\r\n        payEther(car_price).then(function (result) {\r\n            console.log('PayEther Return Value')\r\n            if (result) {\r\n                console.log('Payment fetched, lets Mint NFT')\r\n                /**\r\n                 * Add NFT Code Here\r\n                 */\r\n\r\n                let output = createNFT(meta_url, currentAccount).then(function (result) {\r\n                    console.clear()\r\n                    let transaction_hash = result.tx_hash\r\n                    let token_id = result.token_id\r\n\r\n                    const mint_url = \"http://localhost:8000/nft/minted\";\r\n                    console.log(nftid + '-' + transaction_hash + '-' + token_id + '-' + car_id, currentAccount, 'dCar');\r\n                    console.log('Mint Transaction Hash:- ' + transaction_hash)\r\n\r\n                    $.post(mint_url, {\r\n                            nft_id: nftid,\r\n                            event: \"mint\",\r\n                            to: currentAccount,\r\n                            from: 'dCars',\r\n                            tx_hash: transaction_hash,\r\n                            token_id: token_id,\r\n                            car_id: car_id\r\n                        },\r\n                        function (data) {\r\n                            console.log(data);\r\n                        }\r\n                    );\r\n                });\r\n\r\n                alert('You successfully bought this car. The car ownership transferred to you.')\r\n            } else {\r\n                console.log('User do not want NFT!!!')\r\n            }\r\n        });\r\n\r\n    });\r\n    connect()\r\n\r\n});"]},"metadata":{},"sourceType":"module"}