{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport NFTMarketplace from \"../abis/NFTMarketplace.json\";\nvar selectedAccount;\nvar erc721token;\nvar isInitialized;\nexport var init =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var provider, web3, address;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            provider = window.ethereum;\n\n            if (typeof provider !== 'undefined') {\n              provider.request({\n                method: 'eth_requestAccounts'\n              }).then(function (accounts) {\n                selectedAccount = accounts[0];\n                console.log(\"Selected account\", accounts);\n              }).catch(function (err) {\n                console.log(err);\n              });\n              window.ethereum.on('accountsChanged', function (accounts) {\n                selectedAccount = accounts[0];\n                console.log(\"Selected account: \", accounts);\n              });\n            } else {\n              console.log(\"Error\");\n            }\n\n            web3 = new Web3(provider);\n            address = NFTMarketplace.networks['5777'].address;\n            erc721token = new web3.eth.Contract(NFTMarketplace.abi, address);\n            isInitialized = true;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function init() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var mintToken =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (isInitialized) {\n              _context2.next = 5;\n              break;\n            }\n\n            _context2.next = 3;\n            return init();\n\n          case 3:\n            _context2.next = 6;\n            break;\n\n          case 5:\n            erc721token.methods.mint(\"https...1\").call().send({\n              from: selectedAccount\n            });\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function mintToken() {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\Users\\root\\Desktop\\marketplace(demo)\\src\\components\\web3.js"],"names":["Web3","NFTMarketplace","selectedAccount","erc721token","isInitialized","init","provider","window","ethereum","request","method","then","accounts","console","log","catch","err","on","web3","address","networks","eth","Contract","abi","mintToken","methods","mint","call","send","from"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AAEA,IAAIC,eAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,aAAJ;AAEA,OAAO,IAAMC,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,QADY,GACDC,MAAM,CAACC,QADN;;AAGZ,gBAAG,OAAOF,QAAP,KAAoB,WAAvB,EAAmC;AAC/BA,cAAAA,QAAQ,CACCG,OADT,CACiB;AAACC,gBAAAA,MAAM,EAAE;AAAT,eADjB,EAESC,IAFT,CAEc,UAACC,QAAD,EAAc;AAChBV,gBAAAA,eAAe,GAAGU,QAAQ,CAAC,CAAD,CAA1B;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,QAAhC;AAEH,eANT,EAOSG,KAPT,CAOe,UAACC,GAAD,EAAS;AACZH,gBAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACH,eATT;AAUQT,cAAAA,MAAM,CAACC,QAAP,CAAgBS,EAAhB,CAAmB,iBAAnB,EAAsC,UAASL,QAAT,EAAkB;AACpDV,gBAAAA,eAAe,GAAGU,QAAQ,CAAC,CAAD,CAA1B;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,QAAlC;AAEH,eAJD;AAKX,aAhBD,MAiBI;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;;AACKI,YAAAA,IAvBM,GAuBC,IAAIlB,IAAJ,CAASM,QAAT,CAvBD;AAwBNa,YAAAA,OAxBM,GAwBIlB,cAAc,CAACmB,QAAf,CAAwB,MAAxB,EAAgCD,OAxBpC;AAyBZhB,YAAAA,WAAW,GAAG,IAAIe,IAAI,CAACG,GAAL,CAASC,QAAb,CAAsBrB,cAAc,CAACsB,GAArC,EACTJ,OADS,CAAd;AAEAf,YAAAA,aAAa,GAAG,IAAhB;;AA3BY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJC,IAAI;AAAA;AAAA;AAAA,GAAV;AA8BP,OAAO,IAAMmB,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA,gBACjBpB,aADiB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEXC,IAAI,EAFO;;AAAA;AAAA;AAAA;;AAAA;AAKrBF,YAAAA,WAAW,CAACsB,OAAZ,CAAoBC,IAApB,CAAyB,WAAzB,EAAsCC,IAAtC,GAA6CC,IAA7C,CAAkD;AAACC,cAAAA,IAAI,EAAE3B;AAAP,aAAlD;;AALqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATsB,SAAS;AAAA;AAAA;AAAA,GAAf","sourcesContent":["import Web3 from 'web3';\r\nimport NFTMarketplace from \"../abis/NFTMarketplace.json\";\r\n\r\nlet selectedAccount;\r\nlet erc721token;\r\nlet isInitialized;\r\n\r\nexport const init = async () => {\r\n    let provider = window.ethereum;\r\n\r\n        if(typeof provider !== 'undefined'){\r\n            provider\r\n                    .request({method: 'eth_requestAccounts'})\r\n                    .then((accounts) => {\r\n                        selectedAccount = accounts[0];\r\n                        console.log(\"Selected account\", accounts);\r\n                        \r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n                    });\r\n                    window.ethereum.on('accountsChanged', function(accounts){\r\n                        selectedAccount = accounts[0];\r\n                        console.log(\"Selected account: \", accounts);\r\n\r\n                    });\r\n        }\r\n        else{\r\n            console.log(\"Error\")\r\n        }\r\n        const web3 = new Web3(provider);\r\n        const address = NFTMarketplace.networks['5777'].address;\r\n        erc721token = new web3.eth.Contract(NFTMarketplace.abi,\r\n             address)\r\n        isInitialized = true;\r\n};\r\n\r\nexport const mintToken = async () =>{\r\n    if(!isInitialized){\r\n        await init()\r\n    }\r\n    else{\r\n    erc721token.methods.mint(\"https...1\").call().send({from: selectedAccount});\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}