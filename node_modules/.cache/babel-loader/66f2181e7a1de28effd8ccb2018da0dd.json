{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\root\\\\Desktop\\\\marketplace(demo)\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport NFTMarketplace from \"../abis/NFTMarketplace.json\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.connectWallet();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n    /*async loadWeb3(){\r\n        const provider = await detectEthereumProvider()\r\n          if(provider){\r\n            console.log(\"CryptoWallet connected!\")\r\n            window.web3 = new Web3(provider)\r\n        }\r\n        else{\r\n            console.log(\"CryptoWallet didn't connected\")\r\n        }\r\n    }\r\n      async loadBlockchainData(){\r\n        const web3 = window.web3;\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account:accounts})\r\n          const networkId = await web3.eth.net.getId()\r\n        const networkData = NFTMarketplace.networks[networkId]\r\n        if(networkData){\r\n              const abi = NFTMarketplace.abi;\r\n            const address = networkData.address;\r\n            const contract = new web3.eth.Contract(abi, address);\r\n            console.log(contract)\r\n        }\r\n        else{\r\n            console.log(\"Network didn't find\")\r\n        }\r\n        }\r\n    */\n\n  }, {\n    key: \"connectWallet\",\n    value: function () {\n      var _connectWallet = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var ethereumButton, showAccount;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                ethereumButton = document.querySelector('.enableEthereumButton');\n                showAccount = document.querySelector('.showAccount');\n                ethereumButton.addEventListener('click', function () {\n                  getAccount(showAccount);\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function connectWallet() {\n        return _connectWallet.apply(this, arguments);\n      }\n\n      return connectWallet;\n    }()\n  }, {\n    key: \"getAccount\",\n    value: function () {\n      var _getAccount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(_showAccount) {\n        var accounts, account;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return ethereum.request({\n                  method: 'eth_requestAccounts'\n                });\n\n              case 2:\n                accounts = _context3.sent;\n                account = accounts[0];\n                _showAccount.innerHTML = account;\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getAccount(_x) {\n        return _getAccount.apply(this, arguments);\n      }\n\n      return getAccount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"NFT Marketplace\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\root\\Desktop\\marketplace(demo)\\src\\components\\App.js"],"names":["React","Component","Web3","detectEthereumProvider","NFTMarketplace","App","connectWallet","ethereumButton","document","querySelector","showAccount","addEventListener","getAccount","_showAccount","ethereum","request","method","accounts","account","innerHTML"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,cAAP,MAA2B,6BAA3B;;IAEMC,G;;;;;;;;;;;;;;;;;;;;;;uBAKO,KAAKC,aAAL,E;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCUC,gBAAAA,c,GAAiBC,QAAQ,CAACC,aAAT,CAAuB,uBAAvB,C;AACjBC,gBAAAA,W,GAAcF,QAAQ,CAACC,aAAT,CAAuB,cAAvB,C;AAEpBF,gBAAAA,cAAc,CAACI,gBAAf,CAAgC,OAAhC,EAAyC,YAAM;AAC3CC,kBAAAA,UAAU,CAACF,WAAD,CAAV;AACD,iBAFH;;;;;;;;;;;;;;;;;;;;;iDAKaG,Y;;;;;;;uBACUC,QAAQ,CAACC,OAAT,CAAiB;AAAEC,kBAAAA,MAAM,EAAE;AAAV,iBAAjB,C;;;AAAjBC,gBAAAA,Q;AACAC,gBAAAA,O,GAAUD,QAAQ,CAAC,CAAD,C;AACxBJ,gBAAAA,YAAY,CAACM,SAAb,GAAyBD,OAAzB;;;;;;;;;;;;;;;;;;6BAII;AACJ,aACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,CADA;AAKH;;;;EAjEajB,S;;AAoElB,eAAeI,GAAf","sourcesContent":["import React, {Component} from \"react\";\r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport NFTMarketplace from \"../abis/NFTMarketplace.json\"\r\n\r\nclass App extends Component{\r\n\r\n    async componentDidMount(){\r\n       // await this.loadWeb3();\r\n       // await this.loadBlockchainData();\r\n       await this.connectWallet();\r\n    }\r\n\r\n    /*async loadWeb3(){\r\n        const provider = await detectEthereumProvider()\r\n\r\n        if(provider){\r\n            console.log(\"CryptoWallet connected!\")\r\n            window.web3 = new Web3(provider)\r\n        }\r\n        else{\r\n            console.log(\"CryptoWallet didn't connected\")\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData(){\r\n        const web3 = window.web3;\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account:accounts})\r\n\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = NFTMarketplace.networks[networkId]\r\n        if(networkData){\r\n\r\n            const abi = NFTMarketplace.abi;\r\n            const address = networkData.address;\r\n            const contract = new web3.eth.Contract(abi, address);\r\n            console.log(contract)\r\n        }\r\n        else{\r\n            console.log(\"Network didn't find\")\r\n        }\r\n\r\n\r\n    }\r\n    */\r\n\r\n\r\n    async connectWallet(){\r\n        const ethereumButton = document.querySelector('.enableEthereumButton');\r\n        const showAccount = document.querySelector('.showAccount');\r\n        \r\n        ethereumButton.addEventListener('click', () => {\r\n            getAccount(showAccount);\r\n          });\r\n    }\r\n\r\n    async getAccount(_showAccount){\r\n        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\r\n        const account = accounts[0];\r\n        _showAccount.innerHTML = account;\r\n    }\r\n\r\n    \r\n    render(){\r\n        return(\r\n        <div>\r\n            <h1>NFT Marketplace</h1>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}